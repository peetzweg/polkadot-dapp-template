// Auto-generated via `yarn polkadot-types-from-chain`, do not edit
/* eslint-disable */

// import type lookup before we augment - in some environments
// this is required to allow for ambient/previous definitions
import '@polkadot/api-base/types/errors';

import type { ApiTypes, AugmentedError } from '@polkadot/api-base/types';

export type __AugmentedError<ApiType extends ApiTypes> = AugmentedError<ApiType>;

declare module '@polkadot/api-base/types/errors' {
  interface AugmentedErrors<ApiType extends ApiTypes> {
    babe: {
      /**
       * A given equivocation report is valid but already previously reported.
       **/
      DuplicateOffenceReport: AugmentedError<ApiType>;
      /**
       * Submitted configuration is invalid.
       **/
      InvalidConfiguration: AugmentedError<ApiType>;
      /**
       * An equivocation proof provided as part of an equivocation report is invalid.
       **/
      InvalidEquivocationProof: AugmentedError<ApiType>;
      /**
       * A key ownership proof provided as part of an equivocation report is invalid.
       **/
      InvalidKeyOwnershipProof: AugmentedError<ApiType>;
      /**
       * Generic error
       **/
      [key: string]: AugmentedError<ApiType>;
    };
    bridgePolkadotGrandpa: {
      /**
       * The pallet has already been initialized.
       **/
      AlreadyInitialized: AugmentedError<ApiType>;
      /**
       * Error generated by the `OwnedBridgeModule` trait.
       **/
      BridgeModule: AugmentedError<ApiType>;
      /**
       * The authority set from the underlying header chain is invalid.
       **/
      InvalidAuthoritySet: AugmentedError<ApiType>;
      /**
       * The given justification is invalid for the given header.
       **/
      InvalidJustification: AugmentedError<ApiType>;
      /**
       * The pallet is not yet initialized.
       **/
      NotInitialized: AugmentedError<ApiType>;
      /**
       * The header being imported is older than the best finalized header known to the pallet.
       **/
      OldHeader: AugmentedError<ApiType>;
      /**
       * Too many authorities in the set.
       **/
      TooManyAuthoritiesInSet: AugmentedError<ApiType>;
      /**
       * The scheduled authority set change found in the header is unsupported by the pallet.
       * 
       * This is the case for non-standard (e.g forced) authority set changes.
       **/
      UnsupportedScheduledChange: AugmentedError<ApiType>;
      /**
       * Generic error
       **/
      [key: string]: AugmentedError<ApiType>;
    };
    bridgePolkadotMessages: {
      /**
       * Error generated by the `OwnedBridgeModule` trait.
       **/
      BridgeModule: AugmentedError<ApiType>;
      /**
       * Submitter has failed to pay fee for delivering and dispatching messages.
       **/
      FailedToWithdrawMessageFee: AugmentedError<ApiType>;
      /**
       * The outbound lane is inactive.
       **/
      InactiveOutboundLane: AugmentedError<ApiType>;
      /**
       * The cumulative dispatch weight, passed by relayer is not enough to cover dispatch
       * of all bundled messages.
       **/
      InsufficientDispatchWeight: AugmentedError<ApiType>;
      /**
       * Invalid messages delivery proof has been submitted.
       **/
      InvalidMessagesDeliveryProof: AugmentedError<ApiType>;
      /**
       * Invalid messages has been submitted.
       **/
      InvalidMessagesProof: AugmentedError<ApiType>;
      /**
       * The relayer has declared invalid unrewarded relayers state in the
       * `receive_messages_delivery_proof` call.
       **/
      InvalidUnrewardedRelayersState: AugmentedError<ApiType>;
      /**
       * The inbound message dispatcher is inactive.
       **/
      MessageDispatchInactive: AugmentedError<ApiType>;
      /**
       * The message someone is trying to work with (i.e. increase fee) is not yet sent.
       **/
      MessageIsNotYetSent: AugmentedError<ApiType>;
      /**
       * Message has been treated as invalid by chain verifier.
       **/
      MessageRejectedByChainVerifier: AugmentedError<ApiType>;
      /**
       * Message has been treated as invalid by lane verifier.
       **/
      MessageRejectedByLaneVerifier: AugmentedError<ApiType>;
      /**
       * Message has been treated as invalid by the pallet logic.
       **/
      MessageRejectedByPallet: AugmentedError<ApiType>;
      /**
       * Pallet is not in Normal operating mode.
       **/
      NotOperatingNormally: AugmentedError<ApiType>;
      /**
       * Error confirming messages receival.
       **/
      ReceivalConfirmation: AugmentedError<ApiType>;
      /**
       * The transaction brings too many messages.
       **/
      TooManyMessagesInTheProof: AugmentedError<ApiType>;
      /**
       * Generic error
       **/
      [key: string]: AugmentedError<ApiType>;
    };
    bridgePolkadotParachains: {
      /**
       * Error generated by the `OwnedBridgeModule` trait.
       **/
      BridgeModule: AugmentedError<ApiType>;
      /**
       * Parachain heads storage proof is invalid.
       **/
      HeaderChainStorageProof: AugmentedError<ApiType>;
      /**
       * The number of stored relay block is different from what the relayer has provided.
       **/
      InvalidRelayChainBlockNumber: AugmentedError<ApiType>;
      /**
       * Relay chain block hash is unknown to us.
       **/
      UnknownRelayChainBlock: AugmentedError<ApiType>;
      /**
       * Generic error
       **/
      [key: string]: AugmentedError<ApiType>;
    };
    grandpa: {
      /**
       * Attempt to signal GRANDPA change with one already pending.
       **/
      ChangePending: AugmentedError<ApiType>;
      /**
       * A given equivocation report is valid but already previously reported.
       **/
      DuplicateOffenceReport: AugmentedError<ApiType>;
      /**
       * An equivocation proof provided as part of an equivocation report is invalid.
       **/
      InvalidEquivocationProof: AugmentedError<ApiType>;
      /**
       * A key ownership proof provided as part of an equivocation report is invalid.
       **/
      InvalidKeyOwnershipProof: AugmentedError<ApiType>;
      /**
       * Attempt to signal GRANDPA pause when the authority set isn't live
       * (either paused or already pending pause).
       **/
      PauseFailed: AugmentedError<ApiType>;
      /**
       * Attempt to signal GRANDPA resume when the authority set isn't paused
       * (either live or already pending resume).
       **/
      ResumeFailed: AugmentedError<ApiType>;
      /**
       * Cannot signal forced change so soon after last.
       **/
      TooSoon: AugmentedError<ApiType>;
      /**
       * Generic error
       **/
      [key: string]: AugmentedError<ApiType>;
    };
    imOnline: {
      /**
       * Duplicated heartbeat.
       **/
      DuplicatedHeartbeat: AugmentedError<ApiType>;
      /**
       * Non existent public key.
       **/
      InvalidKey: AugmentedError<ApiType>;
      /**
       * Generic error
       **/
      [key: string]: AugmentedError<ApiType>;
    };
    relayerSet: {
      /**
       * Relayer is already in the relayer set.
       **/
      Duplicate: AugmentedError<ApiType>;
      /**
       * Relayer is not in the relayer set.
       **/
      NotARelayer: AugmentedError<ApiType>;
      /**
       * Generic error
       **/
      [key: string]: AugmentedError<ApiType>;
    };
    session: {
      /**
       * Registered duplicate key.
       **/
      DuplicatedKey: AugmentedError<ApiType>;
      /**
       * Invalid ownership proof.
       **/
      InvalidProof: AugmentedError<ApiType>;
      /**
       * Key setting account is not live, so it's impossible to associate keys.
       **/
      NoAccount: AugmentedError<ApiType>;
      /**
       * No associated validator ID for account.
       **/
      NoAssociatedValidatorId: AugmentedError<ApiType>;
      /**
       * No keys are associated with this account.
       **/
      NoKeys: AugmentedError<ApiType>;
      /**
       * Generic error
       **/
      [key: string]: AugmentedError<ApiType>;
    };
    sudo: {
      /**
       * Sender must be the Sudo account
       **/
      RequireSudo: AugmentedError<ApiType>;
      /**
       * Generic error
       **/
      [key: string]: AugmentedError<ApiType>;
    };
    system: {
      /**
       * The origin filter prevent the call to be dispatched.
       **/
      CallFiltered: AugmentedError<ApiType>;
      /**
       * Failed to extract the runtime version from the new runtime.
       * 
       * Either calling `Core_version` or decoding `RuntimeVersion` failed.
       **/
      FailedToExtractRuntimeVersion: AugmentedError<ApiType>;
      /**
       * The name of specification does not match between the current runtime
       * and the new runtime.
       **/
      InvalidSpecName: AugmentedError<ApiType>;
      /**
       * Suicide called when the account has non-default composite data.
       **/
      NonDefaultComposite: AugmentedError<ApiType>;
      /**
       * There is a non-zero reference count preventing the account from being purged.
       **/
      NonZeroRefCount: AugmentedError<ApiType>;
      /**
       * The specification version is not allowed to decrease between the current runtime
       * and the new runtime.
       **/
      SpecVersionNeedsToIncrease: AugmentedError<ApiType>;
      /**
       * Generic error
       **/
      [key: string]: AugmentedError<ApiType>;
    };
    transactionStorage: {
      /**
       * Authorization has not expired.
       **/
      AuthorizationNotExpired: AugmentedError<ApiType>;
      /**
       * Authorization was not found.
       **/
      AuthorizationNotFound: AugmentedError<ApiType>;
      /**
       * Attempted to call `store`/`renew` outside of block execution.
       **/
      BadContext: AugmentedError<ApiType>;
      /**
       * Data size is not in the allowed range.
       **/
      BadDataSize: AugmentedError<ApiType>;
      /**
       * Double proof check in the block.
       **/
      DoubleCheck: AugmentedError<ApiType>;
      /**
       * Proof failed verification.
       **/
      InvalidProof: AugmentedError<ApiType>;
      /**
       * Unable to verify proof becasue state data is missing.
       **/
      MissingStateData: AugmentedError<ApiType>;
      /**
       * Renewed extrinsic not found.
       **/
      RenewedNotFound: AugmentedError<ApiType>;
      /**
       * Too many transactions in the block.
       **/
      TooManyTransactions: AugmentedError<ApiType>;
      /**
       * Proof was not expected in this block.
       **/
      UnexpectedProof: AugmentedError<ApiType>;
      /**
       * Generic error
       **/
      [key: string]: AugmentedError<ApiType>;
    };
    validatorSet: {
      /**
       * Validator is already in the validator set.
       **/
      Duplicate: AugmentedError<ApiType>;
      /**
       * Validator is not in the validator set.
       **/
      NotAValidator: AugmentedError<ApiType>;
      /**
       * Adding the validator would take the validator count above the maximum.
       **/
      TooManyValidators: AugmentedError<ApiType>;
      /**
       * Generic error
       **/
      [key: string]: AugmentedError<ApiType>;
    };
  } // AugmentedErrors
} // declare module
